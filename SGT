import numpy as np
import pandas as pd
import math as m
from numpy.linalg import inv
import datetime as dt
import matplotlib.pyplot as plt

print(' \u0332'.join("SGT Risk Mitigation"))
print("Input daily return: SPY, GLD, TLT and lookback time period")
print()

time_0 = dt.datetime.now()

# input parameters:
from pandas_datareader import data
offset = float(input("Number of past calendar days: "))
tdy = dt.date.today()
start = tdy + dt.timedelta(days=-offset)
print('from',start, 'to', tdy,),
symbols = ["SPY", "GLD", "TLT"]
## dp = datapanel
for i in range(len(symbols)):
    dp = data.DataReader(symbols[i], "yahoo", start)
    dp['Percent Return'] = dp['Adj Close'].pct_change()
    # check for correct order after insertion
    # print(symbols[i])
    # print(dp.head())
    if i == 0:
        ddp = pd.DataFrame(dp['Percent Return'])
    else:
        ddp.insert(i, i, dp['Percent Return'])

ddp.columns = symbols
pts = ddp.count()[0]
print('               ', pts, 'trading days      (', offset+1, 'calendar days)')
ann = 252./pts
mean = ann*ddp.mean()
cov = ann*ddp.cov()
print(mean)
print(cov)
r_f = float(input('risk free rate: '))

time_input = dt.datetime.now()


def frontier_data(a, x, y, m1, m2, cov, r):
    for i in range(len(a)):
        m_ef = a[i] * m1 + (1 - a[i]) * m2
        y[i] = np.dot(m_ef, r)
        x[i] = m.sqrt(np.dot(m_ef.T, np.dot(cov, m_ef)))

# start main here
print()
print('portfolio optimization & efficient frontier')
print()
names = symbols
# returns = np.array([.0427, .0015, .0285])
returns = mean
# covariances = np.array([[.01, .0018, .0011], [.0018, .0109, .0026], [.0011, .0026, .0199]])
covariances = cov
inv_covariances = inv(covariances)
print(names)
print()
print('returns:')
print(returns)
print()
print('covariances:')
print(covariances)
print()
print('1/covariances:')
print(inv_covariances)

weights = np.array([1 / 3, 1 / 3, 1 / 3])
print()
print('weights:', weights)
portfolio = weights * returns
portfolio_return = sum(portfolio)
print('portfolio_return =', portfolio_return)
sigma_portfolio2 = np.dot(weights, np.dot(covariances, weights))
sigma_portfolio = m.sqrt(sigma_portfolio2)
print('sigma_portfolio =', sigma_portfolio)
print()

weights2 = np.array([.8, .4, -.2])
print('weights2:', weights2)
portfolio2 = weights2 * returns
portfolio2_return = sum(portfolio2)
print('portfolio2_return =', portfolio2_return)
sigma_portfolio22 = np.dot(weights2, np.dot(covariances, weights2))
sigma_portfolio2 = m.sqrt(sigma_portfolio22)
print('sigma_portfolio2 =', sigma_portfolio2)
print()
cov12 = np.dot(weights2.T, np.dot(covariances, weights))
cov = np.array([[1, cov12], [cov12, 1]])
print('covariance matrix P1P2:')
print(cov)
print()
# stop
print('I')
print('portfolio optimization: minimum variance:')
print('use lagrange multipliers for constraint sum(m_i)=1')
print('minimum variance condition: 2*P1P2*m=0')
print('use 4x4 matrices:')
cov_4x4 = np.c_[2 * covariances, [1, 1, 1]]
cov_4x4 = np.vstack([cov_4x4, np.array([1, 1, 1, 0])])
inv_cov_4x4 = inv(cov_4x4)
b = np.array([0., 0., 0., 1.])
m_var = np.dot(inv_cov_4x4, b)
print(names)
m_var3 = m_var[:3]
print(m_var3)
mvp_return = sum(m_var3 * returns)
print('minimum var portfolio return =', mvp_return)
sigma_mvp2 = np.dot(m_var3.T, np.dot(covariances, m_var3))
sigma_mvp = m.sqrt(sigma_mvp2)
print('minimum var portfolio variance =', sigma_mvp2)
print('minimum var portfolio sigma =', sigma_mvp)
print()

print('II')
print('use 3x3 matrices:')
print('solve for m = -.5*lambda*inv(covariances)*1')
print('solve for lambda = -2/(1T*inv(covariances)*1)')
print('m = (inv(covariances)*1)/(1T*inv(covariances)*1)')
aux = np.dot(inv(covariances), [1, 1, 1])
m2 = aux / (np.dot([1, 1, 1], aux))
print(names)
print(m2)
mvp_return = sum(m2 * returns)
print('minimum var portfolio return =', mvp_return)
sigma_mvp2 = np.dot(m2.T, np.dot(covariances, m2))
print('minimum var portfolio variance =', sigma_mvp2)
print('minimum var portfolio sigma =', m.sqrt(sigma_mvp2))
print()

print('III')
print('minimum variance portfolio with same expected return as MSFT')
print('constraints: lambda1: <P3> = <MSFT>; lambda2: sum(m_i)=1')
print('use 5x5 matrices:')
cov_5x5 = np.insert(cov_4x4, 3, np.r_[returns, 0.], 0)
cov_5x5 = np.insert(cov_5x5, 3, np.r_[returns, np.array([0., 0.])], 1)
m3_var = np.dot(inv(cov_5x5), np.array([0., 0., 0., returns[0], 1]))
m3_var3 = m3_var[:3]
print(names)
print(m3_var3)
mvp_msft_return = sum(m3_var3 * returns)
print('minimum var portfolio return =', mvp_msft_return)
print('compare: msft return:', returns[0])
sigma_mvp_msft2 = np.dot(m3_var3.T, np.dot(covariances, m3_var3))
print('minimum var portfolio variance =', sigma_mvp_msft2)
sigma_mvp_msft = m.sqrt(sigma_mvp_msft2)
print('minimum var portfolio sigma =', sigma_mvp_msft)
print('compare: msft sigma:', m.sqrt(covariances[0][0]))
print()
print('IV')
print('minimum variance portfolio with same expected return as SBUX')
print('constraints: lambda1: <P4> = <SBUX>; lambda2: sum(m_i)=1')
print('use 5x5 matrices:')
m4_var = np.dot(inv(cov_5x5), np.array([0., 0., 0., returns[2], 1]))
m4_var3 = m4_var[:3]
print(names)
print(m4_var3)
mvp_sbux_return = sum(m4_var3 * returns)
print('minimum var portfolio return =', mvp_sbux_return)
print('compare: sbux return:', returns[2])
sigma_mvp_sbux2 = np.dot(m4_var3.T, np.dot(covariances, m4_var3))
sigma_mvp_sbux = m.sqrt(sigma_mvp_sbux2)
print('minimum var portfolio variance =', sigma_mvp_sbux2)
print('minimum var portfolio sigma =', sigma_mvp_sbux)
print('compare: sbux sigma:', m.sqrt(covariances[2][2]))
cov34 = np.dot(m4_var3.T, np.dot(covariances, m3_var3))
print('covariance P3P4:', cov34)
print('correlation P3P4:', cov34 / (sigma_mvp_msft * sigma_mvp_sbux))
print()

print('V')
print('calculate minimum variance portfolio for any expected return <r>')
print('use: weights = inv(cov)*M*inv(B)*[<r> 0] with M = [returns 1], B = M.T*inv(cov)*M')
print('Example: minimum variance portfolio with same expected return as NORD')
M = np.c_[returns, np.array([1., 1., 1.])]
B = np.dot(M.T, np.dot(inv_covariances, M))
r_bar = np.array([returns[1], 1.])
m5_var = np.dot(inv_covariances, np.dot(M, np.dot(inv(B), r_bar)))
m5_var3 = m5_var[:3]
print(names)
print(m5_var3)
mvp_nord_return = sum(m5_var3 * returns)
print('minimum var portfolio return =', mvp_nord_return)
print('compare: nord return:', returns[1])
sigma_mvp_nord2 = np.dot(m5_var3.T, np.dot(covariances, m5_var3))
print('minimum var portfolio variance =', sigma_mvp_nord2)
sigma_mvp_nord = m.sqrt(sigma_mvp_nord2)
print('minimum var portfolio sigma =', sigma_mvp_nord)
print('compare: nord sigma:', m.sqrt(covariances[1][1]))
print()

print('VI')
print('calculate minimum variance portfolio as a linear combination of 2 min. var. porfolios')
print('use: P3 and P4: P6 = a*P3+(1-a)*P4')
a = .5 # factor for linear combination
m6_var3 = a*m3_var3 + (1-a)*m4_var3
print(names, '   a = ', a)
print(m6_var3)
mvp_p3p4_return = sum(m6_var3 * returns)
print('minimum var portfolio return =', mvp_p3p4_return)
sigma_mvp_p3p42 = np.dot(m6_var3.T, np.dot(covariances, m6_var3))
print('minimum var portfolio variance =', sigma_mvp_p3p42)
sigma_mvp_p3p4 = m.sqrt(sigma_mvp_p3p42)
print('minimum var portfolio sigma =', sigma_mvp_p3p4)
print()

print('VII')
print('creating efficient frontier by methology in VI')
print('use MIN and P3: -2 < a < 1   ______')
# w/o kelly prtfolio:  a = np.linspace(-2, 1, 21)
# w/ kelly prtfolio:
a = np.linspace(-6.5, 1, 21)
x = np.zeros(len(a))
y = np.zeros(len(a))
frontier_data(a, x, y, m2, m3_var3, covariances, returns)
# draw efficient frontier
plt.plot(x, y, c="g")
# draw inefficient frontier
print('"inefficient" portfolio: 1 < a < 3  .....')
a = np.linspace(1, 3, 21)
frontier_data(a, x, y, m2, m3_var3, covariances, returns)
plt.plot(x, y, c="g", linestyle = ':')
print()

print('VIII')
print('creating tangent portfolio by methology in II')
#  r_f = .005      input parameter now
r_f3 = np.array([r_f]*3)
r_x3 = returns-r_f3
aux = np.dot(inv_covariances, r_x3)
mt = aux / (np.dot([1, 1, 1], aux))
print(names)
print(mt)
tan_return = sum(mt * returns)
print('tangency portfolio return =', tan_return)
sigma_tan2 = np.dot(mt.T, np.dot(covariances, mt))
print('tangency portfolio variance =', sigma_tan2)
sigma_tan = m.sqrt(sigma_tan2)
print('tangency portfolio sigma =', sigma_tan)
sharpe = (tan_return-r_f)/sigma_tan
print('sharpe ratio =', sharpe)
#draw tangent porfolio line:
# w/o kelly prtfolio: x = np.linspace(0.015, .18, 2)
# w/ kelly prtfolio:
x = np.linspace(0.015, .45, 5)
y = sharpe*x + r_f
plt.plot(x, y, c="r")
print()

print('IX')
print('high and low risk tangent porfolios')
tan_hi_return =  .07
print(names, '   high risk: return =', tan_hi_return)
print((tan_hi_return - r_f) / (tan_return - r_f) * mt)
sigma_tan_hi = (tan_hi_return - r_f) / sharpe
print('high risk tangency portfolio variance =', sigma_tan_hi)
print()
sigma_tan_low =  .02
print(names, '    low risk: $\sigma =$', sigma_tan_low)
print(sigma_tan_low/sigma_tan*mt)
tan_low_return = sharpe*sigma_tan_low + r_f
print('low risk tangency portfolio return =', tan_low_return)
print()

print('X')
print('Kelly criterion')
print('creating Kelly portfolio by methology in II')
# r_f = .005
# r_f3 = np.array([r_f]*3)
# r_x3 = returns-r_f3
# aux = np.dot(inv_covariances, r_x3)
# mt = aux / (np.dot([1, 1, 1], aux))
kw = aux  #no normalization
print(names)
print(kw, '      leverage:', sum(abs(kw))/sum(kw))
# kw_return = sum(kw * returns) ...this is not correct since he weights do not add up to 1
kw_return = sum(kw*r_x3)+ r_f
print('kelly portfolio return =', kw_return)
sigma_kw2 = np.dot(kw.T, np.dot(covariances, kw))
print('kelly portfolio variance =', sigma_kw2)
sigma_kw = m.sqrt(sigma_kw2)
print('kelly portfolio sigma =', sigma_kw)
# sharpe_kw = (kw_return-r_f)/sigma_kw ...again, this is not correct, because sum(w_i) \not = 1
sharpe_kw = sum(kw*(r_x3))/sigma_kw
print('sharpe ratio =', sharpe_kw)

time_calc = dt.datetime.now()

# graphics
plt.title('minimum variance portfolios')
plt.xlabel('$\sigma _p$')
plt.ylabel('return$_p$')

sigma_stocks = np.empty(3)
for i in range(3):
    sigma_stocks[i] = m.sqrt(covariances[i][i])
    plt.scatter(sigma_stocks[i], returns[i], c="b")
    plt.annotate(names[i], (sigma_stocks[i], returns[i]), xytext=(5, -4), textcoords='offset points')
plt.scatter(sigma_portfolio, portfolio_return, c="r")
plt.annotate('P1', (sigma_portfolio, portfolio_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_portfolio2, portfolio2_return, c="r")
plt.annotate('P2', (sigma_portfolio2, portfolio2_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_mvp, mvp_return, c="g")
plt.annotate('MIN', (sigma_mvp, mvp_return), xytext=(-15, -15), textcoords='offset points')
plt.scatter(sigma_mvp_msft, mvp_msft_return, c="g")
plt.annotate('P3', (sigma_mvp_msft, mvp_msft_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_mvp_sbux, mvp_sbux_return, c="g")
plt.annotate('P4', (sigma_mvp_sbux, mvp_sbux_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_mvp_nord, mvp_nord_return, c="g")
plt.annotate('P5', (sigma_mvp_nord, mvp_nord_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_mvp_p3p4, mvp_p3p4_return, c="g")
plt.annotate('P6', (sigma_mvp_p3p4, mvp_p3p4_return), xytext=(-5, 5), textcoords='offset points')
plt.scatter(sigma_tan, tan_return, c="r")
plt.annotate('TAN', (sigma_tan, tan_return), xytext=(0, -15), textcoords='offset points')
plt.scatter(sigma_tan_hi, tan_hi_return, c="r")
plt.annotate('HI', (sigma_tan_hi, tan_hi_return), xytext=(0, -15), textcoords='offset points')
plt.scatter(sigma_tan_low, tan_low_return, c="r")
plt.annotate('LOW', (sigma_tan_low, tan_low_return), xytext=(-10, 15), textcoords='offset points')
# add kelly portfolio to plot
plt.scatter(sigma_kw, kw_return, c="y")
plt.annotate('KELLY', (sigma_kw, kw_return), xytext=(0, -15), textcoords='offset points')
time_graph = dt.datetime.now()

plt.show()
time_graph_show = dt.datetime.now()

# create simple table
import plotly.graph_objects as go
name_col = [names[0], names[1], names[2], 'P1', 'P2', 'MIN', 'P3/min MSFT', 'P4/min SBUX','P5/min NORD', 'P6/ .5(P3+P4)', 'TAN', 'HI', 'LOW', 'KELLY']
returns_col = [returns[0], returns[1], returns[2], portfolio_return, portfolio2_return, mvp_return, mvp_msft_return, mvp_sbux_return, mvp_nord_return,
               mvp_p3p4_return, tan_return, tan_hi_return, tan_low_return, kw_return]
sigma_col = [m.sqrt(covariances[0][0]), m.sqrt(covariances[1][1]), m.sqrt(covariances[2][2]), sigma_portfolio, sigma_portfolio2, sigma_mvp,
             sigma_mvp_msft, sigma_mvp_sbux, sigma_mvp_nord, sigma_mvp_p3p4, sigma_tan, sigma_tan_hi, sigma_tan_low, sigma_kw]

sharpe_col = [(returns[0]-r_f)/m.sqrt(covariances[0][0]), (returns[1]-r_f)/m.sqrt(covariances[1][1]), (returns[2]-r_f)/m.sqrt(covariances[2][2]),
              (portfolio_return-r_f)/sigma_portfolio, (portfolio2_return-r_f)/sigma_portfolio2,  (mvp_return-r_f)/sigma_mvp,
              (mvp_msft_return-r_f)/sigma_mvp_msft, (mvp_sbux_return-r_f)/sigma_mvp_sbux, (mvp_nord_return-r_f)/sigma_mvp_nord,
              (mvp_p3p4_return-r_f)/sigma_mvp_p3p4, (tan_return-r_f)/sigma_tan, (tan_hi_return-r_f)/sigma_tan_hi, (tan_low_return-r_f)/sigma_tan_low,
              (sharpe_kw)]

fig = go.Figure(data=[go.Table(header=dict(values=['name', 'return', 'sigma', 'sharpe']),
                     cells=dict(values=[name_col, returns_col, sigma_col, sharpe_col],
                     format=[[None], ['.2%'], ['.2%'], ['.3f']]))])
fig.show()
time_table = dt.datetime.now()
print()
print('Calculation time:', (time_calc-time_0).total_seconds()*1000, 'msec')
print('Graph time:', (time_graph - time_calc).total_seconds()*1000, 'msec')
#print('Graph show time:', (time_graph_show - time_graph).total_seconds(), ' sec')
print('Table time:', (time_table - time_graph_show).total_seconds()*1000, 'msec')
print('Total time:', (dt.datetime.now()-time_0).total_seconds()*1000, 'msec')
print('THE END @', dt.datetime.now().strftime('%H:%M:%S'))